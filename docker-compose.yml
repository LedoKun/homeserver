version: '3.8'

x-common-env: &common-env
  PUID: ${PUID}
  PGID: ${PGID}
  TZ: ${TZ}

x-common-deploy: &common-deploy
  placement:
    constraints:
      - node.hostname == baam
  restart_policy:
    condition: on-failure

services:
  caddy:
    image: caddy:2-alpine
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
      - "${AUDIOBOOKSHELF_WEBUI_PORT}:${AUDIOBOOKSHELF_WEBUI_PORT}"
      - "${AUDIOBOOKSHELF_WEBUI_PORT}:${AUDIOBOOKSHELF_WEBUI_PORT}/udp"
    volumes:
      - ${CONFIG_ROOT}/caddy/Caddyfile:/etc/caddy/Caddyfile
      - ${CONFIG_ROOT}/caddy/data:/data
      - ${CONFIG_ROOT}/caddy/config:/config
      - ${CONFIG_ROOT}/caddy/www:/usr/share/caddy
      - /var/run/tailscale/tailscaled.sock:/var/run/tailscale/tailscaled.sock:z
    cap_add:
      - NET_ADMIN
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    networks:
      - caddy-public
      - caddy-host
    dns:
      - 1.1.1.1
      - 1.0.0.1
      - 100.100.100.100

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    environment:
      <<: *common-env
    volumes:
      - ${CONFIG_ROOT}/prowlarr:/config
    deploy:
      <<: *common-deploy
    networks:
      - caddy-public

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    environment:
      <<: *common-env
    volumes:
      - ${CONFIG_ROOT}/sonarr:/config
      - ${MEDIA_ROOT}/public/TV:/tv
      - ${MEDIA_ROOT}:/downloads
    deploy:
      <<: *common-deploy
    networks:
      - caddy-public

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    environment:
      <<: *common-env
    volumes:
      - ${CONFIG_ROOT}/radarr:/config
      - ${MEDIA_ROOT}/public/Movies:/movies
      - ${MEDIA_ROOT}:/downloads
    deploy:
      <<: *common-deploy
    networks:
      - caddy-public

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    environment:
      <<: *common-env
    volumes:
      - ${CONFIG_ROOT}/qbittorrent:/config
      - ${MEDIA_ROOT}:/downloads
    deploy:
      <<: *common-deploy
    ports:
      - "${QBITTORRENT_PORT}:${QBITTORRENT_PORT}"
      - "${QBITTORRENT_PORT}:${QBITTORRENT_PORT}/udp"
    networks:
      - caddy-public

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    environment:
      <<: *common-env
      PGID: ${JELLYFIN_RENDER_GROUP}
      JELLYFIN_PublishedServerUrl: ${JELLYFIN_IP}
      DOCKER_MODS: ${JELLYFIN_DOCKER_MODS}
    volumes:
      - ${CONFIG_ROOT}/jellyfin:/config
      - ${MEDIA_ROOT}/public/TV:/data/tvshows
      - ${MEDIA_ROOT}/public/Anime:/data/anime
      - ${MEDIA_ROOT}/public/Movies:/data/movies
    deploy:
      <<: *common-deploy
    devices:
      - /dev/dri:/dev/dri
    networks:
      - caddy-public

  filebrowser:
    image: filebrowser/filebrowser
    user: ${PUID}:${PGID}
    ports:
      - "8088:80"
    environment:
      TZ: ${TZ}
    volumes:
      - ${CONFIG_ROOT}/filebrowser/filebrowser.json:/.filebrowser.json
      - ${CONFIG_ROOT}/filebrowser/database.db:/database.db
      - ${MEDIA_ROOT}:/srv
    deploy:
      <<: *common-deploy
    networks:
      - caddy-public

  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:latest
    user: ${PUID}:${PGID}
    environment:
      TZ: ${TZ}
    volumes:
      - ${CONFIG_ROOT}/audiobookshelf/config:/config
      - ${CONFIG_ROOT}/audiobookshelf/metadata:/metadata
      - ${MEDIA_ROOT}/public/Audiobooks:/audiobooks
      - ${MEDIA_ROOT}/public/Podcasts:/podcasts
    deploy:
      <<: *common-deploy
    networks:
      - caddy-public

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    environment:
      <<: *common-env
    volumes:
      - ${CONFIG_ROOT}/readarr:/config
      - ${MEDIA_ROOT}:/downloads
      - ${MEDIA_ROOT}/public/Books:/books
      - ${MEDIA_ROOT}/public/Audiobooks:/audiobooks
    deploy:
      <<: *common-deploy
    networks:
      - caddy-public

  boinc:
    image: lscr.io/linuxserver/boinc:latest
    environment:
      <<: *common-env
      SUBFOLDER: /boinc/
    volumes:
      - ${CONFIG_ROOT}/boinc:/config
      - /var/run/docker.sock:/var/run/docker.sock:z
    privileged: true
    devices:
      - /dev/dri:/dev/dri
    deploy:
      placement:
        constraints:
          - node.hostname == ledokun
      restart_policy:
        condition: on-failure
    networks:
      - caddy-public

  scrutiny:
    image: ghcr.io/analogj/scrutiny:master-omnibus
    cap_add:
      - SYS_RAWIO
    volumes:
      - /run/udev:/run/udev:ro
      - ${CONFIG_ROOT}/scrutiny/config:/opt/scrutiny/config
      - ${CONFIG_ROOT}/scrutiny/influxdb2:/opt/scrutiny/influxdb
    devices:
      - "/dev/sda"
      - "/dev/sdb"
      - "/dev/sdc"
      - "/dev/sdd"
    deploy:
      <<: *common-deploy
    networks:
      - caddy-public

  blocky:
    image: spx01/blocky:latest
    ports:
      - "853:853"
    volumes:
      - ${CONFIG_ROOT}/blocky/config.yml:/app/config.yml
      - ${CONFIG_ROOT}/caddy/config:/caddy/config
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    networks:
      - caddy-public
      - caddy-host
    dns:
      - 1.1.1.1
      - 1.0.0.1
      - 100.100.100.100

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:z
    environment:
      <<: *common-env
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_SCHEDULE: "0 0 4 * * *"
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    networks:
      - caddy-public

networks:
  caddy-public:
    external: true
  caddy-host:
    name: host
    external: true
